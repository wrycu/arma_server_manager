/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as ServerControlRouteImport } from './routes/server-control'
import { Route as ServerConfigsRouteImport } from './routes/server-configs'
import { Route as SchedulesRouteImport } from './routes/schedules'
import { Route as ModManagementRouteImport } from './routes/mod-management'
import { Route as CollectionsRouteImport } from './routes/collections'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as IndexRouteImport } from './routes/index'

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const ServerControlRoute = ServerControlRouteImport.update({
  id: '/server-control',
  path: '/server-control',
  getParentRoute: () => rootRouteImport,
} as any)
const ServerConfigsRoute = ServerConfigsRouteImport.update({
  id: '/server-configs',
  path: '/server-configs',
  getParentRoute: () => rootRouteImport,
} as any)
const SchedulesRoute = SchedulesRouteImport.update({
  id: '/schedules',
  path: '/schedules',
  getParentRoute: () => rootRouteImport,
} as any)
const ModManagementRoute = ModManagementRouteImport.update({
  id: '/mod-management',
  path: '/mod-management',
  getParentRoute: () => rootRouteImport,
} as any)
const CollectionsRoute = CollectionsRouteImport.update({
  id: '/collections',
  path: '/collections',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/collections': typeof CollectionsRoute
  '/mod-management': typeof ModManagementRoute
  '/schedules': typeof SchedulesRoute
  '/server-configs': typeof ServerConfigsRoute
  '/server-control': typeof ServerControlRoute
  '/settings': typeof SettingsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/collections': typeof CollectionsRoute
  '/mod-management': typeof ModManagementRoute
  '/schedules': typeof SchedulesRoute
  '/server-configs': typeof ServerConfigsRoute
  '/server-control': typeof ServerControlRoute
  '/settings': typeof SettingsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/collections': typeof CollectionsRoute
  '/mod-management': typeof ModManagementRoute
  '/schedules': typeof SchedulesRoute
  '/server-configs': typeof ServerConfigsRoute
  '/server-control': typeof ServerControlRoute
  '/settings': typeof SettingsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/collections'
    | '/mod-management'
    | '/schedules'
    | '/server-configs'
    | '/server-control'
    | '/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/collections'
    | '/mod-management'
    | '/schedules'
    | '/server-configs'
    | '/server-control'
    | '/settings'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/collections'
    | '/mod-management'
    | '/schedules'
    | '/server-configs'
    | '/server-control'
    | '/settings'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRoute
  CollectionsRoute: typeof CollectionsRoute
  ModManagementRoute: typeof ModManagementRoute
  SchedulesRoute: typeof SchedulesRoute
  ServerConfigsRoute: typeof ServerConfigsRoute
  ServerControlRoute: typeof ServerControlRoute
  SettingsRoute: typeof SettingsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/server-control': {
      id: '/server-control'
      path: '/server-control'
      fullPath: '/server-control'
      preLoaderRoute: typeof ServerControlRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/server-configs': {
      id: '/server-configs'
      path: '/server-configs'
      fullPath: '/server-configs'
      preLoaderRoute: typeof ServerConfigsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/schedules': {
      id: '/schedules'
      path: '/schedules'
      fullPath: '/schedules'
      preLoaderRoute: typeof SchedulesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/mod-management': {
      id: '/mod-management'
      path: '/mod-management'
      fullPath: '/mod-management'
      preLoaderRoute: typeof ModManagementRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/collections': {
      id: '/collections'
      path: '/collections'
      fullPath: '/collections'
      preLoaderRoute: typeof CollectionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRoute,
  CollectionsRoute: CollectionsRoute,
  ModManagementRoute: ModManagementRoute,
  SchedulesRoute: SchedulesRoute,
  ServerConfigsRoute: ServerConfigsRoute,
  ServerControlRoute: ServerControlRoute,
  SettingsRoute: SettingsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
